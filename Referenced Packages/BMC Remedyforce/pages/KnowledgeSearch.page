<apex:page showHeader="false" sidebar="false" controller="BMCServiceDesk.KnowledgeSearchController" cache="false" contentType="text/html" standardStylesheets="false">
<apex:includeScript value="{!$Resource.BMCServiceDesk__BMCRFCommonJS}/StdLayoutCommon.js" />


<!-- Manasi -->
<!--<body id='docBody' onload="initiateSelfClosing()">  -->
<!-- End Manasi -->
    <c:CommonIncludes />
    <script type="text/javascript" src="{!$Resource.SDEFExtJS}/ex/ux/Spinner.js"></script>
    <script type="text/javascript" src="{!$Resource.SDEFExtJS}/ex/ux/SpinnerField.js"></script>
    <link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFExtJS}/resources/css/ext-all.css" />
    <link rel="stylesheet" type="text/css" href="{!$Resource.SDEFExtJS}/ex/ux/css/Spinner.css" /> 
    <apex:includeScript value="{!$Resource.BMCServiceDesk__SDEFExtJS}/adapter/ext/ext-base.js" id="ext-base-js"/>
    <apex:includeScript value="{!$Resource.BMCServiceDesk__SDEFExtJS}/ext-all.js" id="ext-all-js"/>
    <script type="text/javascript" src="{!$Resource.SDEFExtJS}/ex/ux/PagingMemoryProxy.js"></script>    
    <script src="https://www.google.com/jsapi" type="text/javascript"></script>    
    <link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/Knowledge.css" />
    <!-- added to fix the tooltip bug -->
    <link rel="Stylesheet" type="text/css" href="{!$Resource.SDEFStyles}/BMCStyleSheet.css" />
    <!--  addition completed -->
    <script type="text/javascript" src="{!$Resource.SDEFCommonJS}/Vtabpanel.js"></script>
	<script type="text/javascript" src="{!$Resource.BMCServiceDesk__BMCRFCommonJS}/StdLayoutCommon.js"></script>
    <!--  Prem  -->
    <script>
    
	function closeWindowParent(){
        window.close();
    }	
	
	function pop(){return null;}
	
    // Nakul -------------
    var isConsoleEnabled = '{!isConsoleEnabled}';	
    var recordId = getUrlParameter('KMincidentID');
    var stdLayoutObjName = getUrlParameter('objectName');
    
    if(stdLayoutObjName!='undefined' && stdLayoutObjName !=null && stdLayoutObjName!=''){
   		if(stdLayoutObjName == 'Broadcasts'){ 	           	      
           		recordId = getUrlParameter('KMbroadcastID');
       	}else if(stdLayoutObjName == 'Tasks'){ 	           	      
       			recordId = getUrlParameter('KMtaskID');
       	}else if(stdLayoutObjName == 'Problems'){ 	           	      
       			recordId = getUrlParameter('KMproblemID');
       	}else if(stdLayoutObjName == 'Incidents'){ 	           	      
       			recordId = getUrlParameter('KMincidentID');
       	}
    }
    
    //var showPopupHeader = getUrlParameter('popupHeader');
 
    if(showStdLayout){
        //showPopupHeader = showPopupHeader.replace(/%20/g," ");
        var header = '{!JSENCODE($Label.GlobalSearch)}';
        document.title=header ;
    }
    var url = document.URL;
   
 //end by nakul   
    </script>
    <!--End Prem -->    
            <style>
            #sfKMSearchResults,
            #sfRASearchResults,
            #sfRASearchResults .x-panel-bwrap .x-panel-body,
            #sfKMSearchResults .x-panel-bwrap .x-panel-body{
            	width: 100% ;
            }
			
            .x-form-spinner-splitter{
				overflow:hidden !important;
            }
            /*For defect #58137 */
             #searchResults {
			    height: 97%;
			}
			.ux-vertical-tabs, .ux-vertical-tabs .x-tab-panel-bwrap, .ux-vertical-tabs .x-tab-panel-body {
			    height: 96%;
			}
			.ux-vertical-tabs-left .x-tab-panel-body {
			    border: 1px solid #AEBAC1;
			}
			/*syles for ie8*/
		    #searchResults .x-tab-panel .x-tab-panel-bwrap{
		        width /*\**/: 84%\9;
		    } 
		
		    /*syles for ie7*/
		    html* #searchResults .x-tab-panel .x-tab-panel-bwrap{
		        width: 84%;
		    }
		    .x-form-invalid, textarea.x-form-invalid {
			    background-color: #FFFFFF !important; 
			    background-image: none !important;
			    border-color: #AEBAC1 !important;
			}
            #box2 {
				width:656px;
				height:615px;
				border: 0px #000 solid;
				position: absolute;
				background-color:white;
				left: 0px;
				top: 0px;
				z-index: 2;
				visibility:hidden;
			}
			#frmPage{
				border:0px;
				height:577px;
			}
			#advanceSearch{
				margin-right:5px;
			}
			.gs-title, .gs-visibleUrl, .gs-snippet
			{
				font-size: 11px;
			}
			div.gsc-webResult .gsc-result
			{padding : 0.25em 0;
			}
			.sort-desc .x-grid3-sort-icon {
				background-image: url({!$Resource.SDEFStyles}/SDEFimages/arrow_sort_descending.gif) !important;
				height:10px;
				width:10px;
			}
			.sort-asc .x-grid3-sort-icon {
				background-image: url({!$Resource.SDEFStyles}/SDEFimages/arrow_sort_ascending.gif) !important;
				height:10px;
				width:10px;
			}
            </style>
    
    <body id="docBody" style="width:100% ">
        <apex:outputPanel id="wholePage" rendered="true">
                        
            <script>
            var calledFromForm = '{!JSENCODE($CurrentPage.parameters.calledFromForm)}';
            var searchText = '{!JSENCODE($CurrentPage.parameters.search)}';
            var incidentID = '{!JSENCODE($CurrentPage.parameters.KMincidentID)}';
            var isCalendarSearch = '{!JSENCODE($CurrentPage.parameters.isCalendarSearch)}'
			var problemID = '{!JSENCODE($CurrentPage.parameters.KMproblemID)}';
            var knowledgeArticleWindow;
            Ext.QuickTips.init();
            var tabs1 ; 
            var DisplayChatterTab = true;
            var ChatterError = true;
            var chatterXML,dispComment,dispPost; 
            var KeywordLabel = '{!JSENCODE($Label.SearchKeyword)}';
			var ChatterLabel = '{!JSENCODE($Label.GlobalSearchChatter)}';
            var classForSpinnerField = 'clsSpinnerField';
		    var classForTextField = 'clsTextField';
		    if(Ext.isIE8){
	            classForSpinnerField = 'clsSpinnerFieldIE8';
	            classForTextField = 'clsTextFieldIE8';		    
		    }
		    searchText = unescape(searchText);
		    searchText = searchText.replace(/&lt\;/g,'<');
		    searchText = searchText.replace(/&amp\;/g,'&');
		    searchText = searchText.replace(/&gt\;/g,'>');
		    searchText = searchText.replace(/&quot\;/g,'"');
		    var ksrProxy;
            var Limitcount; 
            /* the results xml doc */
            var xmlData;
            var text_to_search;
            /* the result tabs */
            var searchTabs;
            var advtooltip;
            var MAX_ROWS_ON_PAGE=300;
            var conn_document;
            var conn_chatter ;
            var conn_obj ;
            var RESULTS_GRID_PANEL_HEIGHT=300;
            
            var DEFAULT_HEADER_WIDTH=300;
            
            var contentSearch=true;
            var documentSearch=true;
            var webSearch=true;
            var tabIndex = 0;
            function msgbox(msg, title, icon, clickHandler){
                var msgIcon = Ext.MessageBox.INFO;//Default
                if(title==null) title=""; 
                if(icon==3){
                    msgIcon = Ext.MessageBox.QUESTION;
                    if(title=="") title="{!JSENCODE($Label.Question)}"  
                }else if(icon==2){
                    msgIcon = Ext.MessageBox.WARNING;
                    if(title=="") title="{!JSENCODE($Label.Warning)}"
                }else if(icon==1){  
                    msgIcon = Ext.MessageBox.ERROR;
                    if(title=="") title="{!JSENCODE($Label.Error)}"
                }
                if(title=="") title="{!JSENCODE($Label.Information)}"
                Ext.MessageBox.show({
                   title: title,
                   msg: msg,
                   buttons: Ext.MessageBox.OK,
                   fn: clkHandler,
                   icon: msgIcon
               });
            }function clkHandler(btn){};
            function ReplaceAll(Source,stringToFind,stringToReplace){
				var reptemp = Source;
				var repindex = reptemp.indexOf(stringToFind);
				while(repindex != -1)
				{
					reptemp = reptemp.replace(stringToFind,stringToReplace);
					repindex = reptemp.indexOf(stringToFind);
				}
				return reptemp;
			}
						
			function RemoveReserveCharactersForSOSL(value)
			{
				var chars = new Array('?', '&', '|', '!', '{', '}', '[', ']', '(', ')', '^', '~', '*', ':', '\\', '"', '+', '-', '\'');
				for(var j = 0 ; j < chars.length; j++)
				{
					value = value.replace(chars[j],'');
				}
				return value
			}
			
            function txtSearch(){
            	
            	if (conn_document != null){
    				conn_document.abort();
				} 
				if (conn_chatter != null){
    				conn_chatter.abort();
				} 
				if (conn_obj != null){
    				conn_obj.abort();
				} 
				if(ksrProxy != null){
			     ksrProxy.destroy();
				}
				if(searchTabs != null){
				    searchTabs.destroy();
				} 
                text_to_search = document.getElementById("txtSrch").value;
                //text_to_search = ReplaceAll(text_to_search,"*"," ");
                var tempstringtopass = RemoveReserveCharactersForSOSL(text_to_search).trim();
                text_to_search = text_to_search.trim();
               	if(text_to_search==KeywordLabel || (tempstringtopass.length < 2) ){
                      window.parent.Ext.MessageBox.show({                                
                                title: "{!JSENCODE($Label.Warning)}",
                                msg:"{!JSENCODE($Label.GsErrorMsg)}" ,
                                width:300,
                                buttons: Ext.MessageBox.OK,
                                fn: clkHandler
                                
                            });
                      return;
                }
                Limitcount=document.getElementById("mresult").value;
                if(Limitcount > 200)
                {
                	Limitcount = 200;
                	document.getElementById("mresult").value = Limitcount;
                	document.getElementById("txtSrch").value = text_to_search;
                }
                if(Limitcount < 10)
                {
                	Limitcount = 10;
                	document.getElementById("mresult").value = Limitcount;
                	document.getElementById("txtSrch").value = text_to_search;
                }
                doSearch();
                
            } 
            
            function Dorefersh(){
                document.getElementById("txtSrch").value=KeywordLabel;
                document.getElementById("mresult").value = 50;
                
                if(ksrProxy != null){
                    try{
                    ksrProxy.destroy();
                    }catch(e){
                    }
                }
                if(searchTabs != null) searchTabs.destroy();
                //location.reload(true);            
            }
            
            function renderMenuBar(){
                widthTxt =   parseInt((Ext.get('grid').getWidth() * 0.45), 10)
                if (widthTxt < 100) widthTxt = 100;
                
                var tbarOptions1 = new Array(8)
                tbarOptions1[0]=new Ext.BoxComponent({
                	xtype : 'box',
                	autoEl: {tag: 'img', src:'{!$Resource.SDEFStyles}/SDEFbuttons/status-11-information.gif'}, 
                	id:'advanceSearch',
                	listeners:{
                		render: function(c){
                			c.getEl().on('mouseover', function(){
                				if(advtooltip){
                					advtooltip.show();
                				}                				
	                        });
                		}
                	}
                });
                
                tbarOptions1[1]=new Ext.form.TextField({
                    id: 'txtSrch',
                    name: 'txtSrch',
                    fieldLabel: 'Search',
                    width: widthTxt,
                    allowBlank: true,
                    emptyText: KeywordLabel,
                    listeners: {
                            specialkey: function(field, e){
                                if (e.getKey() == e.ENTER){
                                        txtSearch();
                                }
                            },
                            render: function(c) {
                              Ext.QuickTips.register({
                                target: c,
                                text: '{!JSENCODE($Label.TooltipGlobalSearchSearch)}'
                              });
                            }

                        }
                });
                
                tbarOptions1[2]={id:'ks_search_btn', iconCls: 'bmcSearch', handler: txtSearch, tooltip:'{!JSENCODE($Label.search)}'};
                tbarOptions1[3]={id:'ks_refresh_btn', scale: 'medium', iconCls: 'bmcRefresh', tooltip: '{!JSENCODE($Label.refresh)}', style:{align: 'left'},handler: Dorefersh};
                tbarOptions1[4]='-';
                
                var filterMenus1 = new Array(3);
                    filterMenus1[0]={id:'ks_settings_content', xtype:'checkbox', name: 'sopt1', group: 'soptg', checked: true, boxLabel: '{!JSENCODE($Label.SearchContent)}', inputValue:true, handler: function(item, checked){contentSearch=checked}};
                    filterMenus1[1]={id:'ks_settings_document', xtype:'checkbox', name: 'sopt2', group: 'soptg', checked: true, boxLabel: '{!JSENCODE($Label.SearchDocuments)}', inputValue:true, handler: function(item, checked){documentSearch=checked}};
                    filterMenus1[2]={id:'ks_settings_web', xtype:'checkbox', name: 'sopt3', group: 'soptg', checked: true, boxLabel: '{!JSENCODE($Label.SearchWeb)}', inputValue:true, handler: function(item, checked){webSearch=checked}};
                tbarOptions1[5]={icon :'{!$Resource.SDEFStyles}/SDEFbuttons/b_settings_on.png', tooltip: '{!JSENCODE($Label.settings)}',id:'settingBTN', tooltipType: 'title', menu: filterMenus1};
                
                tbarOptions1[6]='-';
                tbarOptions1[7]=new Ext.form.Label({text: '{!JSENCODE($Label.MaximumResults)}'}); 
                tbarOptions1[8]= new Ext.ux.form.SpinnerField({
                    id: 'mresult',
                    xtype: 'spinnerfield',
                    fieldLabel: 'Maximum Results',
                    name: 'mresult',
                    minValue: 10,
                    minValueText:'abcd',
                    maxValue: 200,
                    value:50,
                    allowDecimals: false,
                    incrementValue: 10,
                    width:50,
                    cls:classForSpinnerField,
                    enableKeyEvents : true,
                    listeners: {   
                            render: function(c) {
                              Ext.QuickTips.register({
                                target: c,
                                hideDelay:3000,
								dismissDelay: 5000,                                
                                text: '{!JSENCODE($Label.TooltipGlobalSearchMaximumResults)}'
                              });
                            },
                            keypress: function (item, e) {
                            	var sKey = e.getKey();
                            	//Only allow Number key, Backspace and Delete key 
                            	if(!((sKey == 8) || (sKey==46) || ((sKey>=48) && (sKey<=57))))
                            		e.stopEvent();
                            }

                        }
                });
                   
                // This function renders a block of buttons
                var headerPanel =new Ext.Panel({
                    id:'ks_header',
                    renderTo: 'grid',
                    cls:'toolSpCls',
                    tbar: tbarOptions1
                }); 
                
                advtooltip = new Ext.QuickTip({
					target: 'advanceSearch',
					anchor: 'bottom',
					width:Ext.isIE ? Ext.isIE7 ? 305:295:308,
					trackMouse: false,
					bodyStyle:'font: 8pt Tahoma, Verdana, Arial; color:black;width:2%;border-color:black;',
					hideDelay:3000,
					dismissDelay: 5000,
					html: '{!JSENCODE($Label.AdvanceSearchTooltip)}'
				 });
				 
				Ext.sequence(Ext.QuickTip.prototype, 'afterRender', function () {
					this.mon(this.el, 'mouseover', function () {
						this.clearTimer('hide');
						this.clearTimer('dismiss');
					}, this);
				
					this.mon(this.el, 'mouseout', function () {
						this.clearTimer('show');
						if (this.autoHide !== false) {
							this.delayHide();
						}
					}, this);
				}); 
            }

            function renderAdvSearch(){
                var viewport = new Ext.Viewport({
                    layout:'border',
                    renderTo: 'grid1',
                    listeners:{
                        resize:function(){
                           /* if(viewport){
                                if(searchTabs){
                                    text_to_search = document.getElementById("txtSrch").value.trim();
                                    if(text_to_search != KeywordLabel && text_to_search.length >= 2){
                                         var activeTab = searchTabs.getActiveTab();
                                         tabIndex =  searchTabs.items.indexOf(activeTab);
                                         doSearch();                                    
                                    }
                                }
                            }*/
                            
	                        resizeWindow();
	                        
                        }  
                    },
                    items:[
                        { id: 'searchResults', 
                       
                        region:'center', 
                        margins:'40 0 0 0', 
                        layout:'fit'}
                        
                        
                    ]
                });
            }
	function resizeWindow()
	{				
		var searchResultsWidthid1 = document.getElementById("searchResults");
		if(searchResultsWidthid1 != null){
			document.getElementById("searchResults").style.cssText = "width :100%;";
			document.getElementById("searchResults").childNodes[0].style.cssText = "width :auto;";
			if(document.getElementById("searchResults").childNodes[0].childNodes[1] != null){
				if(Ext.isIE){
					var outer1 = document.body.clientWidth ;
					var childSearchDiv = document.getElementById("searchResults").childNodes[0].childNodes[1];							
					document.getElementById("searchResults").childNodes[0].childNodes[1].style.cssText = " overflow-x: auto;";
					document.getElementById(childSearchDiv.id).style.width = outer1 - 160;
				}else{
					document.getElementById("searchResults").childNodes[0].childNodes[1].style.cssText = "width :auto;";  
				}
				if(document.getElementById("searchResults").childNodes[0].childNodes[1].childNodes[0] != null){
					document.getElementById("searchResults").childNodes[0].childNodes[1].childNodes[0].style.cssText = "width :auto;";
				}
			}     
		}				
	}
            function extInit(){
                renderMenuBar();  
                renderAdvSearch();
                //check if the values have been rendered or not                
                autosearch(); 
                
                if(calledFromForm === 'true'){
            		document.getElementById("txtSrch").value = searchText;
            		if (!(!searchText || searchText.trim().length == 0) && searchText.trim().length > 1)
            		{
            			txtSearch();
            		}
            	}
                
                document.getElementById('txtSrch').focus();
                if (Ext.isIE)
                	document.body.className = String(document.body.className).replace('x-border-layout-ct', '');  
            }
             function autosearch()
            {
                if ('{!JSENCODE($CurrentPage.parameters.str)}' == '') return;
                document.getElementById('txtSrch').value = '{!JSENCODE($CurrentPage.parameters.str)}';
				txtSearch();
            }
            
            var lstObjectsToSearch = {!searchableObjectsJSON};
            
            function doSearchDocuments(searchtxt) {
                ChatterError = true;
                 var docSearchtxt = searchtxt.replace(/</g,'&lt;');
                conn_document = new Ext.data.Connection();
                conn_document.request({                
                    url: '/apex/KnowledgeResults?s='+encodeURIComponent(docSearchtxt)+'&i='+contentSearch+'&l='+Limitcount+'&d='+documentSearch+'&f='+'false',
                    success: function(response) {
        
                        ksrProxy = new Ext.data.PagingMemoryProxy(response.responseXML);
        
                        var tabs = new Ext.data.Store({
                            // load using HTTP
                            proxy: ksrProxy,
                            reader: new Ext.data.XmlReader({
                                record: 'TabColumns',
                                id: '@objectAPIName',
                                totalRecords: '@total'
                                }, [
                                    '@pageRef','@objectAPIName', '@objectDisplayName', '@resultCount'
                                   ],
                                {useSimpleXPath: false, debug: true})
                        });
        
                        tabs.on('load',fireCreateAllTabs, this, true);
                        tabs.load();
                        
                        // Search Chatter after document search
        				doSearchChatter(searchtxt);
                    },
                    failure: function() {
        				doSearchChatter(searchtxt);
                        Ext.Msg.alert('Status', '{!JSENCODE($Label.Error)}');
                    }
                });                
            }

            function doSearchChatter(searchtxt) {
              var isChatterEnabled = {!isChatterEnabled};
              
              if(isChatterEnabled==true)
              {
	               ChatterError = true;
	               var chatterSearchtxt = searchtxt.replace(/</g,'&lt;'); 
	               conn_chatter = new Ext.data.Connection();
	               conn_chatter.request({                
	                   url: '/apex/KnowledgeResults?s='+encodeURIComponent(chatterSearchtxt)+'&d='+documentSearch+'&i='+contentSearch+'&l='+Limitcount+'&o=Chatter'+'&f='+'false',
	                   success: function(response) {
	       
	                       ksrProxy = new Ext.data.PagingMemoryProxy(response.responseXML);
	                       
	                       //chatter xml load
	                       tabs1 = new Ext.data.Store({
	                           proxy: ksrProxy,
	                           reader: new Ext.data.XmlReader({
	                               record: 'Chatter'
	                               }, ['@displayChatter','@displayPost', '@displayComment', '@isError'],
	                               {useSimpleXPath: false, debug: true})
	                       });
	                       tabs1.on('load',chatterInfo, this, true);
	                       tabs1.load(); 
	                       
	                       if(webSearch==true)
			                {
			                    google_search();
			                    searchTabs.setActiveTab(tabIndex);
			                }       
	
	                   },
	                   failure: function() {
	                       Ext.Msg.alert('Status', '{!JSENCODE($Label.Error)}');
	                   }
	               });
               }
               else
               if(webSearch==true)
                {
                    google_search();
                    searchTabs.setActiveTab(tabIndex);
                }
            }
            
            
var sfTabRender_str;
            var SFKMSearchSource;
            var sHTML_sf;
            
            //call back function
            function sftabInfo(data){
                var rec = data.getAt(0);                                
                sfTabRender_str = rec.get('@isSFtabDisplayed');             
                
                
                  if(sfTabRender_str=='true')
                    {
                    if(searchTabs == null){
                        document.getElementById('searchResults').innerHTML='';
                        searchTabs =  new Ext.ux.TabPanel({
                            renderTo: 'searchResults',
                            activeTab: 0,
                            deferredRenderer:false,
                            layoutOnTabChange: true,
                            tabPosition:'left',  //choose 'left' or 'right' for vertical tabs; 'top' or 'bottom' for horizontal tabs
                            textAlign:'right',
                            tabWidth:160, 
                            defaults:{autoScroll: true},
                            enableTabScroll: true
                        });
                        sHTML_sf =  '<div style=\"width:98%;height:96%;\">' + sHTML_sf + '</div>'                       
                    }
                                        
                           searchTabs.add({
                           id: 'sfKMSearchResults',
                           title:'{!JSENCODE($Label.Salesforce_Knowledge)}',
                           autoHeight: false,
                           height: 500,
                           autoScroll: true,                                           
                           html : sHTML_sf}).show();
                    }
            }  
	    
	    function doSearchObject(searchtxt, sortedListOfObjects) {
            	var obj = sortedListOfObjects.shift();  
            	var objSearchtxt = searchtxt.replace(/</g,'&lt;');
            	if(!isCalendarSearch){
				   if((contentSearch==true) && (obj=='SalesForce_Knowledge'))
                   {                   
                   //Salesforce Knowledge Search                   
                   SFKMSearchSource = '/apex/KM_SFKnowledgeSearch?kword='+encodeURIComponent(objSearchtxt)+'&psize='+Limitcount;
                     
                     
               		 sHTML_sf = '<iframe id=\"KnowledgeArticleSearchPage\" frameborder=\"0\" src=\"'+SFKMSearchSource+'\" style=\"width:100%;height:99%;border:none;\"></iframe>';
                   
                	var conn_sfsearch = new Ext.data.Connection();
                                
	               	conn_sfsearch.request({                
	                    url: '/apex/KnowledgeResults?s='+encodeURIComponent(objSearchtxt)+'&l='+Limitcount+'&f='+'true',
	                    success: function(response) {
	                    ksrProxy = new Ext.data.PagingMemoryProxy(response.responseXML);  
	                    var store = new Ext.data.Store({
                   	    // load using HTTP
                        proxy: ksrProxy,
                        reader: new Ext.data.XmlReader({
                        		record: 'isSFtabDisplayed'
                                 }, ['@isSFtabDisplayed'],
                                  {useSimpleXPath: false, debug: true})
	                     });     
                                                    
                        store.on('load',sftabInfo,this,true);
                        store.load();                  
                    	}                   
      		  		});
		        		   
            	   		doSearchObject(searchtxt, sortedListOfObjects);
						return;
            	   }
            	   else if((contentSearch==true) && (obj=='RA_Knowledge'))
            	   {
            	   //RightAnswers Knowledge Search	               
		             var RAKMSearchSource =  '{!RA_URL}' + '&query='+encodeURIComponent(objSearchtxt);
		             
            	   var sHTML = '<iframe id=\"RAKnowledgeArticleSearchPage\" frameborder=\"0\" src=\"'+RAKMSearchSource+'\" style=\"width:100%;height:99%;border:none;\"></iframe>';
            	   if(searchTabs == null){
	                    document.getElementById('searchResults').innerHTML='';
	                    searchTabs =  new Ext.ux.TabPanel({
	                        renderTo: 'searchResults',
	                        activeTab: 0,
	                        deferredRenderer:false,
	                        layoutOnTabChange: true,
	                        tabPosition:'left',  //choose 'left' or 'right' for vertical tabs; 'top' or 'bottom' for horizontal tabs
	                        textAlign:'right',
	                        tabWidth:160, 
	                        defaults:{autoScroll: true},
	                        enableTabScroll: true
	                    });
	                    sHTML =  '<div style=\"width:98%;height:96%;\">' + sHTML + '</div>'
                	}
            	   
    				          
		                   searchTabs.add({
		                   id: 'sfRASearchResults',
		                   title:'{!JSENCODE($Label.Right_Answer)}',
		                   autoHeight: false,
		                   height: 500,
		                   autoScroll: true,                     	                   
		        		   html : sHTML}).show();
		        		   
		        		   if(typeof(Ext.getCmp('sfKMSearchResults')) == 'undefined')
		        		  		searchTabs.setActiveTab(0);
		        		   	else
	                	   		searchTabs.setActiveTab('sfKMSearchResults');
	          
            	   		doSearchObject(searchtxt, sortedListOfObjects);
						return;
            	   }
				}		   
            	if(typeof(obj)=='undefined' || obj==null) {
					if(!isCalendarSearch){
            	   		// no objects for searching, search documents now
            	   		doSearchDocuments(searchtxt);
					} else {
	            		if(webSearch==true)
                		{
                    				google_search();
                    				searchTabs.setActiveTab(tabIndex);
                		}
	            	}
            	   	return;
            	}
            	   
		           ChatterError = true;
		           var objSearchtxt = searchtxt.replace(/</g,'&lt;');
		           conn_obj = new Ext.data.Connection();
		           conn_obj.request({                
		               url: '/apex/KnowledgeResults?s='+encodeURIComponent(objSearchtxt)+'&i='+contentSearch+'&l='+Limitcount+'&o='+obj+'&f='+'false&isCalendar='+isCalendarSearch,
		               success: function(response) {
		   
		                   ksrProxy = new Ext.data.PagingMemoryProxy(response.responseXML);
		   
		                   var tabs = new Ext.data.Store({
		                       // load using HTTP
		                       proxy: ksrProxy,
		                       reader: new Ext.data.XmlReader({
		                           record: 'TabColumns',
		                           id: '@objectAPIName',
		                           totalRecords: '@total'
		                           }, [
		                               '@pageRef','@objectAPIName', '@objectDisplayName', '@resultCount'
		                              ],
		                           {useSimpleXPath: false, debug: true})
		                   });
		   
		                   tabs.on('load',fireCreateAllTabs, this, true);
		                   tabs.load();
		                   
		                   doSearchObject(searchtxt, sortedListOfObjects);
		   
		               },
		               failure: function() {
		                   Ext.Msg.alert('Status', '{!JSENCODE($Label.Error)}');
		                   doSearchObject(searchtxt, sortedListOfObjects);
		               }
		           });
            }
            
			var lastClickTime = new Date(); 
			var lastSearchText = null;
			var searchComplete = true; 
            function doSearch(){
                      
                //reset all vars
                var searchtxt = text_to_search;
                if(searchtxt!=null && typeof(searchtxt)!='undefined' && searchtxt!='' && searchtxt.length>1000){
                	searchtxt=searchtxt.substring(0,1000);
                }
                // wait for some time so that the search results are returned or the parameters have changed.
                var TimeDiffInSec = Math.floor(((new Date()).getTime() - lastClickTime.getTime())/1000)
                if(TimeDiffInSec<=2 && searchtxt==lastSearchText && !searchComplete) { return; }
				lastClickTime = new Date();
				lastSearchText = searchtxt;
				searchComplete = false;
				 
                if(ksrProxy != null)
                {
                    try{
                    ksrProxy.destroy();
                    }catch(e){
                    }
                }
                if(searchTabs != null) 
                {searchTabs=null;
                document.getElementById('searchResults').innerHTML='';
                }
                xmlData = null;
                sortedListOfObjects = [];
                for(obj in lstObjectsToSearch){
					sortedListOfObjects[lstObjectsToSearch[obj]] = obj; 
                }// end for
                if(isCalendarSearch){
                	var calendarObj=new Array("{!Namespace}__Change_Request__c","{!Namespace}__Release__c","{!Namespace}__Task__c");
                	doSearchObject(searchtxt, calendarObj);
                }else{
                	isCalendarSearch= false;
					doSearchObject(searchtxt, sortedListOfObjects);	
				}
            }
        
            /* callback on tab data load */
            function chatterInfo(chatterData){
            	//alert('chatterinfo load');
                for (var i = 0; i < chatterData.getCount(); i++) {
                    var rec = chatterData.getAt(i);
                    DisplayChatterTab = rec.get('@displayChatter');
                    dispPost = rec.get('@displayPost');
                    dispComment = rec.get('@displayComment');                    
                    ChatterError = rec.get('@isError');
                }

            	if(DisplayChatterTab === 'true'){

					var ChatterSource = '/apex/ChatterSearchPage?SearchChatterPost='+dispPost+'&SearchChatterComment='+dispComment+'&searchContent='+encodeURIComponent(text_to_search.replace(/</g,'&lt;'))+'&l='+Limitcount;
					var sHTML = '<iframe id=\"ChatterSearchPage\" frameborder=\"0\" src=\"'+ChatterSource+'\" style=\"width:100%;height:100%;border:none;\"></iframe>'
					 					            	
            		if(searchTabs == null){
                    document.getElementById('searchResults').innerHTML='';
                    searchTabs =  new Ext.ux.TabPanel({
                        renderTo: 'searchResults',
                        activeTab: 0,
                        deferredRenderer:false,
                        layoutOnTabChange: true,
                        tabPosition:'left',  //choose 'left' or 'right' for vertical tabs; 'top' or 'bottom' for horizontal tabs
                        textAlign:'right',
                        tabWidth:160, 
                        defaults:{autoScroll: true},
                        enableTabScroll: true
                    });
                    sHTML =  '<div style=\"width:98%;height:96%;\">' + sHTML + '</div>';
                    
                }
            		    
	               
	                        searchTabs.add({
	                        id: 'chatterResults',
	                        title: ChatterLabel,
	                        autoHeight: false,
	                        height: 500,
	                        autoScroll: true,                     
	                        tabTip: 'Chatter',
		            		html : sHTML}).show();
	                }
                            
            }
            
            
            function fireCreateAllTabs(tabs){
        
                for (var i = 0; i < tabs.getCount(); i++) {
                    var rec = tabs.getAt(i);
                    var objectAPIName = rec.get('@objectAPIName');
                    var objectDisplayName = rec.get('@objectDisplayName');
                    var resultCount = rec.get('@resultCount');
                    var pageRef = rec.get('@pageRef');
                   
                    fireCreateTabModel(objectAPIName, objectDisplayName+' '+'('+ resultCount +')', pageRef, objectDisplayName);
                }
            }
        
        
            /* create the model required for the tab */
            function fireCreateTabModel(objectAPIName, objectDisplayName, pageRef, DisplayName, type){
        
                var ds = new Ext.data.Store({
                    // load using HTTP
                    proxy: ksrProxy,
                    objectAPIName: objectAPIName,
                    objectDisplayName: objectDisplayName,
                    pageRef: pageRef,
                   
                    DisplayName: DisplayName,                      
                    reader: new Ext.data.XmlReader({
                        // records will have an "TabColumns" tag
                        //record: '/KnowledgeSearchResponse/DisplayMetadata/TabColusmns[@objectAPIName='+objectAPIName+']/TabColumn',
                        record: 'TabColumns[@objectAPIName=' + objectAPIName +']/TabColumn',
                        id: 'ColumnAPIName',
                        totalRecords: '@total'
                        }, [
                            {name:'header', mapping:'ColumnDisplayName'},
                            {name:'mapping', mapping:'ColumnAPIName'},
                            {name:'width', mapping:'ColumnDisplayWidth'},
                            {name:'sortable', mapping:'ColumnSortable'},
                            {name:'visible', mapping:'ColumnVisible'},
                            {name:'type', mapping:'ColumnDataType'}
                            
                            
                           ],
                        {useSimpleXPath: false, debug: true})
                });
        
                ds.on('load',processColHeaderRecs, this, true);
                ds.load();
            }
        
            function processColHeaderRecs(ds){
                var colHeaders = new Array();
                var colMappings = new Array();
                for (var i = 0; i < ds.getCount(); i++) {
                    var rec = ds.getAt(i);
                    var header = new Array();
                    header['header']= rec.get('header');
                    header['dataIndex']= rec.get('mapping');
                    
                    if(rec.get('visible') == 'false'){
                        header['hidden']=true;
                    }
                    
                    if(null != rec.get('width')){
                        header['width']= rec.get('width');
                    }else{
                        header['width']= DEFAULT_HEADER_WIDTH;
                    }
        			header['tooltip']= rec.get('header');
                    header['sortable']= true;
                   
        
                    header['dataIndex']= rec.get('mapping');
                    colHeaders[i]  = header;
                    colMappings[i] = rec.get('mapping');
                    
                    if(ds.objectAPIName.indexOf('KM_KnowledgeArticle__c')>0 &&	rec.get('mapping') == 'Relevance__c')
                    {
                    	var colRecs = new Array();
                    	colRecs['name'] = rec.get('mapping');
                    	colRecs['type'] = rec.get('type');
                    	colMappings[i] = colRecs;
                    }
                }
        
        
                //create new store with data from search results
                var results = new Ext.data.Store({
                    // load using HTTP
                    proxy: ksrProxy,
                    headers:colHeaders,
                    objectAPIName: ds.objectAPIName,
                    objectDisplayName: ds.objectDisplayName,
                    pageRef: ds.pageRef, 
                   
                    DisplayName: ds.DisplayName,                     
                    reader: new Ext.data.XmlReader({
                        // records will have an "TabColumns" tag
                        record: 'SearchResults/SearchResult[@objectAPIName=' + ds.objectAPIName +']/ResultAtom',
                        totalRecords: '@total'
                        }, colMappings ,
                        {useSimpleXPath: false, debug: true})
                });
        
                createGrid(results);
            }
        
            /* finally create results grid and add it to the tab panel */
            function createGrid(results){
                var headers = results.headers;
                var objectAPIName = results.objectAPIName;
                var objectDisplayName = results.objectDisplayName;
                var pageRef = results.pageRef;  
                
                var DisplayName = results.DisplayName;
                        
                //create grid with the data
                var grid = new Ext.grid.GridPanel({
                        store: results,
                        columns:headers,
                        title: objectDisplayName,
                        tabTip:'{!JSENCODE($Label.TooltipGlobalSearchTabs)}',
                        stripeRows: true,                       
                        enableHdMenu:false,
                        height: RESULTS_GRID_PANEL_HEIGHT,
                        //sm: new Ext.grid.RowSelectionModel({selectRow:Ext.emptyFn}),
                        viewConfig: {
                            forceFit: true,
                            scrollOffset:0
                        }
                        
                });
                grid.on('render', function(record, rowIndex, columnIndex, store) {
                	if(record.store.objectAPIName.toLowerCase() != 'contact' && record.store.objectAPIName.toLowerCase() != 'lead' && record.store.objectAPIName.toLowerCase().indexOf('incidenthistory__c')==-1)
                	{
	                    grid.tip = new Ext.ToolTip({
	                    view: grid.getView(),
	                    target: grid.getView().mainBody,
	                    delegate: '.x-grid3-row',
	                    trackMouse: true,
	                    renderTo: document.body,
	                    listeners: {
	                        beforeshow: function updateTipBody(tip) {
	                        	
	                            	tip.body.dom.innerHTML = "{!JSENCODE($Label.TooltipGlobalSearchMatchingRecord)}";
	                            //alert(record.store.objectAPIName);
	                            //alert(record.get('objectAPIName'));
	                        }
	                    }
	                   });
	                }
                });
                
                grid.on('celldblclick', function(sm){
                    var gridrecord = grid.getSelectionModel().getSelected();
                    var index = grid.getStore().indexOf(gridrecord);
                  //alert(grid.getStore().getAt(index).data.Id);
                    var clickedRecordId = grid.getStore().getAt(index).data.Id;
                    var clickedRecordName =  grid.getStore().getAt(index).data.name;
                     var stdLayout = getStandardLayout();
                    var objAPIName = gridrecord.store.objectAPIName;
                    
					if(stdLayout){ 
						if((objAPIName.toLowerCase() == 'user') || (objAPIName.toLowerCase() == 'contact') || (objAPIName.toLowerCase() == 'lead') || (objAPIName.toLowerCase() == 'account')){
                            window.open('/'+clickedRecordId,"_blank");
                        }
                        else{
                            var objindex = objAPIName.indexOf("__",0);
                            if(objindex >= 0){
                                objAPIName = objAPIName.substring(objindex+2);
                            }  
                            							
                            if((objAPIName.toLowerCase() == 'incident__c') || (objAPIName.toLowerCase() == 'task__c') || (objAPIName.toLowerCase() == 'problem__c') || (objAPIName.toLowerCase() == 'change_request__c') || (objAPIName.toLowerCase() == 'broadcasts__c')||(objAPIName.toLowerCase() == 'release__c')){                            	         
                                if( (isConsoleEnabled == 'true') && (objAPIName.toLowerCase() == 'incident__c')){
                                    window.open('/apex/IncidentConsole?record_id='+clickedRecordId,"_blank");
								}else if( (isConsoleEnabled == 'true') && (objAPIName.toLowerCase() == 'task__c')){
                                    window.open('/apex/TaskConsole?record_id='+clickedRecordId,"_blank");
                                }else{
                                    window.open('/'+clickedRecordId,"_blank");
								}
                            }else if(objAPIName.toLowerCase() == 'bmc_baseelement__c'){
								window.open('/apex/CMDBManager?cmdbRecordId=' + clickedRecordId,"_blank");   
							}else if (objAPIName.toLowerCase().indexOf('bmc_businessservice__c')>=0){
								var srecId = clickedRecordId + '@@businessservice';
								window.open('/apex/CMDBManager?cmdbRecordId=' + srecId,"_blank");
							}
							
                        }
					}
					
					if(isCalendarSearch){
						var objindex = objAPIName.indexOf("__",0);
                        if(objindex >= 0){
                               	objAPIName = objAPIName.substring(objindex+2);
                        }   
                        if((objAPIName.toLowerCase() == 'task__c') || (objAPIName.toLowerCase() == 'change_request__c') || (objAPIName.toLowerCase() == 'release__c')){                
                             	window.open('/'+clickedRecordId,"_blank");
                        }
					}
					
                    if((!((objAPIName.toLowerCase().indexOf('bmc_baseelement__c')>=0) || (objAPIName.toLowerCase().indexOf('bmc_businessservice__c')>=0)) ) && ((objAPIName != 'Document' && pageRef != '')||((objAPIName.toLowerCase().indexOf('km_knowledgearticle__c') >= 0)))){
                   		var title;
                   		if (objAPIName.toLowerCase().indexOf('incident__c') >= 0)
                   			title = '%23' + grid.getStore().getAt(index).data.name;
                   			//title = '{!$Label.incident}'+ ' %23' + grid.getStore().getAt(index).data.name;
                   		else if (objAPIName.toLowerCase().indexOf('task__c') >= 0)
                   			title = '%23' + grid.getStore().getAt(index).data.name;
                   			//title = '{!$Label.task}'+ ' %23' + grid.getStore().getAt(index).data.name;
                   		else if (objAPIName.toLowerCase().indexOf('faq__c') >= 0)
                   			title = '%23' + grid.getStore().getAt(index).data.name;
                        else if (objAPIName.toLowerCase().indexOf('km_knowledgearticle__c') >= 0){
                        	if(calledFromForm==='true'){	                        		                        	  
								// Code By Prem ----------------------
                                if(stdLayout ){
                                    var header = '{!JSENCODE($Label.GlobalSearch)}';
									//------to open global search from Stdlayout Remedyforce Dashboard portlet search item
									//The window will open as modal window for knowledge article
									if(recordId =='undefined' || recordId ==null || recordId ==''){                                    	
										var retVal = window.showModalDialog('/apex/KM_ArticleView?id='+clickedRecordId+'&popupHeader='+ header +'&standardLayout=true&calledFromForm=true&enableSelfClosing=false&isGS=true',window.self,"dialogheight:550px;dialogwidth:670px;dialogleft:"+stdScreenLeft()+"px;dialogtop:"+stdScreenTop()+"px;resizable:0;scroll:yes");  
										if ( retVal == 'close'){
											window.close();
										}                             	
                                    }
                                    else{
	                                    var retVal = window.showModalDialog('/apex/KM_ArticleView?id='+clickedRecordId+'&incidentID='+incidentID+'&problemID='+problemID+'&popupHeader='+ header +'&standardLayout=true&calledFromForm=true&enableSelfClosing=false',window.self,"dialogheight:550px;dialogwidth:670px;dialogleft:"+stdScreenLeft()+"px;dialogtop:"+stdScreenTop()+"px;resizable:0;scroll:yes");
										if ( retVal == 'close'){
											window.close();
										} 
                                    }        
									            
									return; 
                                }// End Prem------------------- 
                                else{                                   
                                    document.getElementById('frmPage').src="/apex/KM_ArticleView?id="+clickedRecordId+'&incidentID='+incidentID+'&problemID='+problemID+'&calledFromForm=true';
                                    document.getElementById('box2').style.visibility = 'visible';
                                }
                                title = DisplayName;
                                return;
	                        }else{
	                        	//code by prem------------------
                                if(stdLayout ){
									var header = '{!JSENCODE($Label.GlobalSearch)}';
									var retVal = window.showModalDialog('/apex/KM_ArticleView?id='+clickedRecordId+'&popupHeader='+ header +'&standardLayout=true&calledFromform=true&enableSelfClosing=false&isGS=true',window.self,"dialogheight:550px;dialogwidth:670px;dialogleft:"+stdScreenLeft()+"px;dialogtop:"+stdScreenTop()+"px;resizable:0;scroll:yes");        
									if ( retVal == 'close'){
										window.close();
									} 
									return;
                                }//end prem----------
                                else{
									window.parent.addTab("/apex/KM_ArticleView?id="+clickedRecordId+'&calledFromform=true&isGS=true', clickedRecordName,clickedRecordName);
                                }
                                return;                           
	                        }
						}                            
                   		else if (objAPIName.toLowerCase().indexOf('user')>= 0)
                   		{
                   			title = '{!JSENCODE($Label.ClientPageTitle)}';
                   			DisplayName = '{!JSENCODE($Label.ClientPopupTitle)}';
                   		}	
                        else{                        
                   			title = DisplayName;
						}
	       				var url = "NavigatorPage?title="+ title +"&target="+pageRef+"?id=" + grid.getStore().getAt(index).data.Id;
						if(!stdLayout){
							if(calledFromForm == 'true'){
								window.parent.parent.parent.addNewTab(DisplayName, DisplayName, url);
							}else{
								window.parent.parent.addNewTab(DisplayName, DisplayName, url);         
							}
						}
						else
						{
							if((objAPIName.toLowerCase().indexOf('category')>= 0 ) && (calledFromForm != 'true'))
							{								
								window.parent.parent.addNewTab(DisplayName, DisplayName, url);
							}
						}
                    }
                    if(objAPIName == 'Document'){ 
                         
                        if(grid.getStore().getAt(index).data.Type != 'URL'){
                            window.open('/servlet/servlet.FileDownload?file='+grid.getStore().getAt(index).data.Id);
                        }else{
                            window.open(grid.getStore().getAt(index).data.Id);                        
                        }  
                    } 
                    if (objAPIName.toLowerCase().indexOf('bmc_baseelement__c')>=0 || objAPIName.toLowerCase().indexOf('bmc_businessservice__c')>=0 ){
						var recId = grid.getStore().getAt(index).data.Id;
						var cmdwin;
						if(calledFromForm==='true'){
							if(objAPIName.toLowerCase().indexOf('bmc_businessservice__c')>=0)
								recId = recId + '@@businessservice';
							window.parent.parent.parent.CMDB_RecordID = recId;
							cmdwin = window.parent.parent.parent.CMDBManagerWin;
						}
						else
						{
							if(objAPIName.toLowerCase().indexOf('bmc_businessservice__c')>=0)
								recId = recId + '@@businessservice';
							window.parent.parent.CMDB_RecordID = recId;
							cmdwin = window.parent.parent.CMDBManagerWin;
						}								
						if(cmdwin != null && cmdwin && cmdwin.CheckAndOpenInstance) {
							cmdwin.CheckAndOpenInstance();
						}				
						if(!stdLayout){						
							if(calledFromForm==='true'){												
								window.parent.parent.parent.addNewTab("CMDBManager", "{!JSENCODE($Label.Navigator_ConfigurationItems)}","NavigatorPage?title=&tabName="+title+"&target=CMDBManager?id=1010");
							}else{                        	
								window.parent.parent.addNewTab("CMDBManager", "{!JSENCODE($Label.Navigator_ConfigurationItems)}","NavigatorPage?title=&tabName="+title+"&target=CMDBManager?id=1010");                   
							}
						}
					}



					if(objAPIName.toLowerCase().indexOf('history__c')>=0) 
                    { 
                   		if(stdLayout)
                    	{	
			                if(objAPIName.toLowerCase().indexOf('incidenthistory__c')>=0)
			                {
			                    var url1="/apex/IncidentHistoryPage?id=";
			                    window.open(url1 + clickedRecordId +"&isLookup=true&standardLayout=true",'','width=690,height=400');
			                }else if(objAPIName.toLowerCase().indexOf('taskhistory__c')>=0){
	                            var url1="/apex/taskHistoryPage?id=";
			                    window.open(url1 + clickedRecordId +'&isLookup=true&standardLayout=true','','width=690,height=400');
	                        }else if(objAPIName.toLowerCase().indexOf('broadcasthistory__c')>=0){
		                    	var url1="/apex/BroadcastHistoryPage?id=";
		                        window.open(url1 + clickedRecordId +'&isLookup=true&standardLayout=true','','width=690,height=400');
		                    }else{	
		                    	var url1="/apex/ObjectHistoryPage?id=";
		                        if(objAPIName.toLowerCase().indexOf('sla_history__c')>=0){
window.open(url1+clickedRecordId+'&formname=ServiceLevelAgreement__c&isLookup=true&standardLayout=true','','width=690,height=400');
		                        }else if(objAPIName.toLowerCase().indexOf('change_history__c')>=0){
window.open(url1 + clickedRecordId +'&formname=Change_Request__c&isLookup=true&standardLayout=true','','width=690,height=400');
		                        }else if(objAPIName.toLowerCase().indexOf('problem_history__c')>=0){
window.open(url1 + clickedRecordId +'&formname=Problem__c&isLookup=true&standardLayout=true','','width=690,height=400');
		                        }   
			                        
			                }
			            }else{
							//Not a standard layout
		               		if(objAPIName.toLowerCase().indexOf('incidenthistory__c')>=0){
        window.openPopupWithTitle("IncidentHistoryPage?id="+ clickedRecordId +"&isLookup=true",pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420 : 418,670);
		                    }else if(objAPIName.toLowerCase().indexOf('taskhistory__c')>=0){
        window.openPopupWithTitle('taskHistoryPage?id='+ clickedRecordId +'&isLookup=true',pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420 : 418,670);
							}else if(objAPIName.toLowerCase().indexOf('broadcasthistory__c')>=0){
        window.openPopupWithTitle('BroadcastHistoryPage?id='+ clickedRecordId +'&isLookup=true',pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420:418,670);
		                    }else{	
			                    if(objAPIName.toLowerCase().indexOf('sla_history__c')>=0){
window.openPopupWithTitle('ObjectHistoryPage?id='+ clickedRecordId +'&formname=ServiceLevelAgreement__c&isLookup=true',pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420 : 418,670);
			                    }else if(objAPIName.toLowerCase().indexOf('change_history__c')>=0){
window.openPopupWithTitle('ObjectHistoryPage?id='+clickedRecordId+'&formname=Change_Request__c&isLookup=true',pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420 : 418,670);
			                    }else if(objAPIName.toLowerCase().indexOf('problem_history__c')>=0){
window.openPopupWithTitle("ObjectHistoryPage?id=" + clickedRecordId +'&formname=Problem__c&isLookup=true',pop,'',Ext.isIE7 ? 432 : Ext.isIE8 ? 420 : 418,670);
			                    }
	                        }
		                }
                    }
                                
                });   
                //load results after grid definition rather than fire grid creation as a callback
                //this is to prevent multiple onload calls whenever pagination occurs.
                results.load({params:{start:0, limit: MAX_ROWS_ON_PAGE}});
        
                if(searchTabs == null){
                    document.getElementById('searchResults').innerHTML='';
                    searchTabs =  new Ext.ux.TabPanel({
                        renderTo: 'searchResults',
                        xtype:'grid',
                        activeTab: 0,
                        items: grid,
                        deferredRenderer:false,
                        layoutOnTabChange: true,
                        tabPosition:'left',  //choose 'left' or 'right' for vertical tabs; 'top' or 'bottom' for horizontal tabs
                        textAlign:'right',
                        tabWidth:160, 
                        defaults:{autoScroll: true},
                        enableTabScroll: true
                    });
                 }else{
                    searchTabs.add(grid);
                 }
            }
        
            /*External Google Search*/
        
            //<![CDATA[
            google.load('search', '1');
                
            function google_search(){
                var search_txt = text_to_search;
                if(searchTabs == null){
                    document.getElementById('searchResults').innerHTML='';
                    searchTabs =  new Ext.ux.TabPanel({
                        renderTo: 'searchResults',
                        activeTab: 0,
                        deferredRenderer:false,
                        layoutOnTabChange: true,
                        tabPosition:'left',  //choose 'left' or 'right' for vertical tabs; 'top' or 'bottom' for horizontal tabs
                        textAlign:'right',
                        tabWidth:160, 
                        defaults:{autoScroll: true},
                        enableTabScroll: true
                    });
                }
                
                if(search_txt){
                    searchTabs.add({
                        id: 'searchcontrol',
                        title: '{!JSENCODE($Label.web)}',
                        autoHeight: false,
                        height: 500,
                        autoScroll: true,                     
                        tabTip: '{!JSENCODE($Label.TooltipGlobalSearchWebTab)}'
                    }).show();
                    
                    //searchTabs.add({title:'Web', iconCls:'icon-list', html:'<div id="searchcontrol"></div>'});
                    
                    
                    // Create a search control 
                    var searchControl = new google.search.SearchControl();
					var NO_RESULT = "{!JSENCODE($Label.NoSearchResult)}";
					
                    var options = new google.search.SearcherOptions();
                    options.setExpandMode(google.search.SearchControl.EXPAND_MODE_OPEN);
                    searchControl.addSearcher(new google.search.WebSearch(), options);
                    searchControl.setResultSetSize(google.search.Search.LARGE_RESULTSET);
                    
                   //create a drawOptions object
                    var drawOptions = new google.search.DrawOptions();
            
                   //tell the searcher to draw itself in linear mode
                    drawOptions.setDrawMode(google.search.SearchControl.DRAW_MODE_LINEAR);
                    searchControl.draw(document.getElementById("searchcontrol"), drawOptions);
                   searchControl.setNoResultsString(NO_RESULT); 
                   //execute an inital search
                    searchControl.execute(search_txt);
            
                   //google.setOnLoadCallback(OnLoad);
                   searchComplete=true; 
            
                   //]]>
                }else{
                }   
            }
            </script>
            
            <div id="grid"></div>
            <div id="grid1"></div>
			<div id="box2" style="width:100%">
				<iframe id="frmPage" src="" height="100%" width="100%" border="0"></iframe>
			</div>             
            <script>Ext.onReady(extInit);</script>
            <!--pre>{!log}</pre-->
           
        </apex:outputPanel>
    </body>
    <script>
    function hideBox2(){
		document.getElementById('box2').style.visibility = 'hidden';
	}
	function pasteResolution(resolution,KMID,type,isVisibleInSS){
		//code by prem
		var stdLayout = getStandardLayout();
        if(stdLayout ){
           // window.opener.pasteResStd(resolution,KMID);
           // nakul ------
           
           
           	var str = resolution;
			if(str != ''){
				str=str.replace(/<\s*br\/*>/gi, " ");
				str=str.replace(/<\s*a.*href="(.*?)".*>(.*?)<\/a>/gi, " $2 (Link->$1) ");
				str=str.replace(/<\s*\/*.+?>/ig, " ");
				str=str.replace(/ {2,}/gi, " ");
				str=str.replace(/\n+\s*/gi, "");
			   
				if(type == 'text'){
					str = htmlDecode(str);
				}
			}
            if(type == 'link'){            
				
				if(stdLayoutObjName == 'Broadcasts'){ 	           	      
	           		window.opener.parent.location.href="/apex/StdBroadcastExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str)+"&isVisibleInSS=" + isVisibleInSS;
	           	}else if(stdLayoutObjName == 'Tasks'){ 	           	      
	           		if(getUrlParameter('isCalledFromConsole')=='true')
	           	    	window.opener.pasteResolution(str);
	           	   	else	           	      
	           		window.opener.parent.location.href="/apex/StdTaskExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str)+"&isVisibleInSS=" + isVisibleInSS;
	           	}else if(stdLayoutObjName == 'Problems'){ 	           	      
	           		window.opener.parent.location.href="/apex/StdProblemExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str)+"&isVisibleInSS=" + isVisibleInSS;
	           	}else{
	           	   if(getUrlParameter('isCalledFromConsole')=='true')
	           	    window.opener.pasteResolution(str,isVisibleInSS);
	           	   else
	           		window.opener.location.href="/apex/StdLayoutBtnToolbarPage?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str)+"&isVisibleInSS=" + isVisibleInSS;
	           	}
			}else{
				if(stdLayoutObjName == 'Broadcasts'){ 	           	      
	           		window.opener.parent.location.href="/apex/StdBroadcastExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str);
	           	}else if(stdLayoutObjName == 'Tasks'){ 	           	      
	           		if(getUrlParameter('isCalledFromConsole')=='true')
	           	    	window.opener.parent.pasteResolution(str);
	           	    else 	           	      
	           		window.opener.parent.location.href="/apex/StdTaskExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str);
	           	}else if(stdLayoutObjName == 'Problems'){ 	           	      
	           		window.opener.parent.location.href="/apex/StdProblemExtension?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str);
	           	}else{
	           	   if(getUrlParameter('isCalledFromConsole')=='true')
	           	    window.opener.parent.pasteResolution(str,null);
	           	    else	
	           		window.opener.parent.location.href="/apex/StdLayoutBtnToolbarPage?id="+recordId+"&action=pasteResolution&res="+encodeURIComponent(str);
	           	}
         	}
           // end --------
        }else{
            document.getElementById('box2').style.visibility = 'hidden';
            parent.pasteRes(resolution,KMID,type);
            window.parent.closeGSPopup();
        }
        return true;
	}
    </script>
    <script type="text/javascript">
		var css = document.createElement('style');
		css.type = 'text/css';
		
		var styles = '{!setWidthCSS}';
		
		if (css.styleSheet) css.styleSheet.cssText = styles;
		else css.appendChild(document.createTextNode(styles));
		
		document.getElementsByTagName("head")[0].appendChild(css);
	</script>
  <!-- Manasi -->
<!--  </body>-->
  <!--End Manasi -->
</apex:page>