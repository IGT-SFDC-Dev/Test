<apex:page Controller="BMCServiceDesk.CIExplorerLauncherController" showHeader="false" sidebar="false" standardStylesheets="false">

  <script>
 
  var CILaunchData = '';
  var servertime = 0;
  var startCILaunch = '{!cistarttime}';
  var pageloadtime = 0;
  var servertimecounter = 0;
  var pageloadtimecounter = 0;
  var latencytimecounter = 0;
  var finallatency = 0; 
  var infopaneflag = 0;
  var isaccess = {!isAccessible};
  var clsName =''; 
  var recName = '';
  var sequenceId = '';
  </script>
  <c:CommonIncludes />
  <head>
  <script type="text/javascript" src="{!URLFOR($Resource.CIForce,'Silverlight.js')}"></script>
  <script type="text/javascript">
  // code by sumit ... to set window title on std form
  function get_url_parameter( param ){
	param = param.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");;
	var r1 = "[\\?&]"+param+"=([^&#]*)";
	var r2 = new RegExp( r1 );
	var r3 = r2.exec( window.location.href );
	if( r3 == null ){return ""}
	else {return r3[1]};
	} 
 // code by sumit end	
   Ext.onReady(function(){
// code by sumit ... to set window title on std form
   if(get_url_parameter('stdForm')) {
	   document.title='{!JSENCODE($Label.CIExpCIExplorer)}';
	}
 // code by sumit end
   if(Ext.isIE8)
   {
   	
	   if(document.getElementById('silverlightlink') != null)
	   {
	       document.getElementById('silverlightlink').href = "https://go.microsoft.com/fwlink/?LinkID=149156&v=3.0.40624.0";
	   }
	   if(document.getElementById('silverlightimg') != null)
	   {
	      document.getElementById('silverlightimg').src= "https://go.microsoft.com/fwlink/?LinkId=108181";
	   }
   }
 });
 function showMessage(title, message)
  {
     Ext.Msg.alert(title, message);      
  }
  
  function showMessageInJS(title)
  {
     Ext.Msg.alert(title, '{!JSENCODE($Label.CIExplorerOpenerRecordDeleteMessage)}');      
  }

  function showPopup(className, RecordName, seqId)
  {
    var url;
    var title;
    clsName = className;
    recName = RecordName;
    sequenceId = seqId;
    checkPermission(className,RecordName);
  }
    
    function showScreen() {
        var url;
        var title;
		var isConsoleEnabled = '{!isConsoleEnabled}';
        if(isaccess)
         {
            if(clsName == 'Incident__c')
            {
               title = '%23' + sequenceId ;
               url = "NavigatorPage?title="+ title +"&target=IncidentPage?id=" + recName ;
               // Code by sumit ... if std form,open in new window
               if( (get_url_parameter('wid')==null || get_url_parameter('wid')=='') && (isConsoleEnabled == 'false') ) {
               window.open("/"+recName);
               }else if(isConsoleEnabled == 'true'){
                    window.open('/apex/IncidentConsole?record_id='+recName,"_blank");
                    loadIncidentDetail(recName);
               }
               //Code by sumit ... End
               else {
               window.parent.parent.addNewTab('IncidentPage', '{!JSENCODE($Label.Navigator_Incidents)}', url);
              }
            }
            else if(clsName == 'Task__c')
            {
                title = '%23' + sequenceId ; 
                url = "NavigatorPage?title="+ title +"&target=TaskPage?id=" + recName ;
                 // Code by sumit ... if std form,open in new window
				if( (get_url_parameter('wid')==null || get_url_parameter('wid')=='') && (isConsoleEnabled == 'false') ) {
					window.open("/"+recName);
                }else if(isConsoleEnabled == 'true'){
                    window.open('/apex/TaskConsole?record_id='+recName,"_blank");
				}		                
				//Code by sumit ... End
                else {
                window.parent.parent.addNewTab('TaskPage', '{!JSENCODE($Label.Navigator_Tasks)}', url);
            	}
            }
            
            else if(clsName == 'Change_Request__c')
            {
                
                title = '%23' + sequenceId ; 
                url = "NavigatorPage?title="+ title +"&target=ChangeRequestPage?id=" + recName ;
                // Code by sumit ... if std form,open in new window
                if(get_url_parameter('wid')==null || get_url_parameter('wid')=='') {
                window.open("/"+recName);
                }
                //Code by sumit ... End
                else {
                window.parent.parent.addNewTab('ChangeRequestPage', '{!JSENCODE($Label.Navigator_ChangeRequests)}', url);
            	}
            }
            
            else if(clsName == 'Problem__c')
            {
                title = '%23' + sequenceId ; 
                url = "NavigatorPage?title="+ title +"&target=ProblemPage?id=" + recName ;
                // Code by sumit ... if std form,open in new window
                if(get_url_parameter('wid')==null || get_url_parameter('wid')=='') {
                window.open("/"+recName);
                }
                //Code by sumit ... End
                else {
                window.parent.parent.addNewTab('ProblemPage', '{!JSENCODE($Label.Navigator_Problems)}', url);
              }
            }
            else if(clsName == 'bmc_baseelement__c')
            {
				window.parent.parent.CMDB_RecordID = recName+'@@'+sequenceId;
				var cmdwin = window.parent.parent.CMDBManagerWin;
				if(cmdwin != null && cmdwin && cmdwin.CheckAndOpenInstance) {
					cmdwin.CheckAndOpenInstance();
				}
				// Code by sumit ... if std form,open in new window
				if(get_url_parameter('wid')==null || get_url_parameter('wid')=='') {
				   var cmdbRecordId = recName+'@@'+sequenceId;
                    window.open("/apex/CMDBManager?id=1010&cmdbRecordId="+cmdbRecordId);
                }
                //Code by sumit ... End
                else {
				window.parent.parent.addNewTab("CMDBManager", "{!JSENCODE($Label.Navigator_ConfigurationItems)}","NavigatorPage?title=&tabName="+title+"&target=CMDBManager?id=1010");
               }
            }
            else if(clsName == 'Release__c')
            {
				title = '%23' + sequenceId ; 
                //url = "NavigatorPage?title="+ title +"&target=ProblemPage?id=" + recName ;               
                if(get_url_parameter('wid')==null || get_url_parameter('wid')=='') {
                	window.open("/"+recName);
                }                
            }
        }
        else
        {                    
            Ext.Msg.alert('', '{!JSENCODE($Label.UserPermissionMsg)}'); 
        }
    }
	function senddata(){
		return CILaunchData;
	}
    function GetHTMLMsg(labelID)
    {

    var res;

    res = clmArr[labelID];

    if (res == null)
    //force null rather than undefined
    return "";

    return res;
    }
    var CLM_MAX_ID= 7000; //insert new maximum value here
    var clmArr = new Array(CLM_MAX_ID+1);
    var isSA = false;
    
    //Custom Labels to be used in CI-Explorer
    clmArr[6612]= "{!JSENCODE($Label.CIExpCIExplorer)}";

    clmArr[6601]= "{!JSENCODE($Label.CIExpReload)}";
    clmArr[6602]= "{!JSENCODE($Label.CIExpSettings)}";
    clmArr[6603]= "{!JSENCODE($Label.CIExpShowInformationPane)}";
    clmArr[6604]= "{!JSENCODE($Label.CIExpHideInformationPane)}";
    clmArr[6605]= "{!JSENCODE($Label.CIExpHelp)}";
    clmArr[6606]= "{!JSENCODE($Label.CIExpLayout)}";
    clmArr[6607]= "{!JSENCODE($Label.CIExpChooseLayoutStyle)}";
    clmArr[6608]= "{!JSENCODE($Label.CIExpRepositionNodes)}";
    clmArr[6609]= "{!JSENCODE($Label.CIExpZoom)}";
    clmArr[6610]= "{!JSENCODE($Label.CIExpDragTheSliderToZoomInOrZoomOut)}";
    clmArr[1057]= "{!JSENCODE($Label.CIExpPrint)}";
    clmArr[6677]= "{!JSENCODE($Label.CIExpExport)}";

    clmArr[6613]= "{!JSENCODE($Label.CIExpOpenRecord)}";
    clmArr[6614]= "{!JSENCODE($Label.CIExpShowCIRelationships)}";
    clmArr[6615]= "{!JSENCODE($Label.CIExpShowLinkedServices)}";
    clmArr[6616]= "{!JSENCODE($Label.CIExpShowlinkedConfigurationItems)}";

    clmArr[6618]= "{!JSENCODE($Label.CIExpTreeRadial)}";
    clmArr[6619]= "{!JSENCODE($Label.CIExpTreeCentered)}";
    clmArr[6620]= "{!JSENCODE($Label.CIExpTreeCascaded)}";
    clmArr[6675]= "{!JSENCODE($Label.CIExpOrthogonal)}";
    clmArr[6621]= "{!JSENCODE($Label.CIExpLayered)}";
    clmArr[6622]= "{!JSENCODE($Label.CIExpGrid)}";
    clmArr[6623]= "{!JSENCODE($Label.CIExpAnneal)}";
    clmArr[6624]= "{!JSENCODE($Label.CIExpSpring)}";

    clmArr[6626]= "{!JSENCODE($Label.CIExpAllAvailableLinkedServicesOfThisConfigurationItemIfAnyHaveBeen)}";
    clmArr[6627]= "{!JSENCODE($Label.CIExpAllavailablelinkedconfigurationitemsOfThisServiceIfAnyHaveBeen)}";
    clmArr[6625]= "{!JSENCODE($Label.CIExpAllAvailableRelationshipsOfThisConfigurationItemHaveBeenDisplayed)}";
    clmArr[6666]= "{!JSENCODE($Label.CIExpCIExplorerSettings)}";
    clmArr[6665]= "{!JSENCODE($Label.CIExpCIExplorerSettingsFailedToSave)}";
    clmArr[6667]= "{!JSENCODE($Label.CIExpCIExplorerSettingsWereSavedSuccessfully)}";
    clmArr[6641]= "{!JSENCODE($Label.CIExpSelectDefaultLevelForCIRelationshipExpansion)}";
    clmArr[6670]= "{!JSENCODE($Label.CIExpSelectTheLineThickness)}";

    clmArr[6676]= "{!JSENCODE($Label.CIExpShowSubcomponents)}";

    clmArr[6679]= "{!JSENCODE($Label.CIExpAllAvailableLinkedServicesOfThisConfigurationItemIfAnyHaveBeen)}";
    clmArr[6680]= "{!JSENCODE($Label.CIExpThisserviceDoesNotNaveAnyLinkedServices)}";
    clmArr[6683]= "{!JSENCODE($Label.CIExpParentService)}";
    clmArr[6684]= "{!JSENCODE($Label.CIExpChildService)}";
    clmArr[6682]= "{!JSENCODE($Label.CIExpSupportedService)}";
    clmArr[6681]= "{!JSENCODE($Label.CIExpSupportingService)}";

    clmArr[6633]= "{!JSENCODE($Label.CIExpConfigurationItem)}";
    clmArr[6635]= "{!JSENCODE($Label.CIExpService)}";
    clmArr[2335]= "{!JSENCODE($ObjectType.Incident__c.LabelPlural)}";
    clmArr[1168]= "{!JSENCODE($ObjectType.Task__c.LabelPlural)}";
    clmArr[6636]= "{!JSENCODE($ObjectType.Problem__c.LabelPlural)}";
    clmArr[6637]= "{!JSENCODE($ObjectType.Change_Request__c.LabelPlural)}";
    clmArr[6685]= "{!JSENCODE($ObjectType.Release__c.LabelPlural)}";

    clmArr[765]= "{!JSENCODE($ObjectType.Incident__c.fields.incidentDescription__c.label)}";
    clmArr[766]= "{!JSENCODE($ObjectType.Change_Request__c.fields.Change_Description__c.label)}";
    clmArr[767]= "{!JSENCODE($ObjectType.Task__c.fields.taskDescription__c.label)}";
    clmArr[768]= "{!JSENCODE($ObjectType.Problem__c.fields.Problem_Description__c.label)}";
    clmArr[769]= "{!JSENCODE($ObjectType.Release__c.fields.Description__c.label)}";
    
 
	clmArr[6673]= "{!JSENCODE($Label.CIExpIncidentLabel)}";
    clmArr[6672]= "{!JSENCODE($Label.CIExpProblemLabel)}";
    clmArr[6674]= "{!JSENCODE($Label.CIExpTask1)}";
    clmArr[6638]= "{!JSENCODE($Label.CIExpChangeHash)}";
    clmArr[6686]= "{!JSENCODE($Label.CIExpRelease)}";

    clmArr[6631]= "{!JSENCODE($Label.CIExpField)}";
    clmArr[6632]= "{!JSENCODE($Label.CIExpValue)}";

    clmArr[6634]= "{!JSENCODE($Label.CIExpMaximum0)}";
    clmArr[6639]= "{!JSENCODE($Label.CIExpLineSettings)}";
    clmArr[6640]= "{!JSENCODE($Label.CIExpFieldSettings)}";
    clmArr[6668]= "{!JSENCODE($Label.CIExpExpandCIRelationshipsTo)}";
    clmArr[6669]= "{!JSENCODE($Label.CIExplevels)}";
    clmArr[6642]= "{!JSENCODE($Label.CIExpRelationshipType)}";
    clmArr[6643]= "{!JSENCODE($Label.CIExpRelationship)}";
    clmArr[6644]= "{!JSENCODE($Label.CIExpServiceType)}";
    clmArr[6645]= "{!JSENCODE($Label.CIExpLineStyle)}";
    clmArr[6646]= "{!JSENCODE($Label.CIExpDotted)}";
    clmArr[351]= "{!JSENCODE($Label.CIExpSolid)}";
    clmArr[6647]= "{!JSENCODE($Label.CIExpLineDirection)}";
    clmArr[6648]= "{!JSENCODE($Label.CIExpLineThickness)}";
    clmArr[6649]= "{!JSENCODE($Label.CIExpLineColor)}";
    clmArr[6650]= "{!JSENCODE($Label.CIExpLeftToRight)}";
    clmArr[6651]= "{!JSENCODE($Label.CIExpRightToLeft)}";
    clmArr[6652]= "{!JSENCODE($Label.CIExpNonDirectional)}";
    clmArr[6653]= "{!JSENCODE($Label.CIExpDisplayFieldsFor)}";
    clmArr[6654]= "{!JSENCODE($Label.CIExpToolTip)}";
    clmArr[6655]= "{!JSENCODE($Label.CIExpLabel)}";
    clmArr[6656]= "{!JSENCODE($Label.CIExpInformationPane)}";
    clmArr[6657]= "{!JSENCODE($Label.CIExpAddsinglefield)}";
    clmArr[6658]= "{!JSENCODE($Label.CIExpRemoveSingleField)}";
    clmArr[6659]= "{!JSENCODE($Label.CIExpRemoveAllFields)}";
    clmArr[6660]= "{!JSENCODE($Label.CIExpAvailableFields)}";
    clmArr[6661]= "{!JSENCODE($Label.CIExpSelectedFields)}";
    clmArr[5393]= "{!JSENCODE($Label.CIExpModule)}";
    clmArr[1749]= "{!JSENCODE($Label.CIExpOk)}";
    clmArr[6663]= "{!JSENCODE($Label.CIExpClose)}";
    clmArr[6664]= "{!JSENCODE($Label.CIExpSave)}";
    clmArr[36]= "{!JSENCODE($Label.CIExpMoveUpByOneRow)}";
    clmArr[37]= "{!JSENCODE($Label.CIExpMovedownByOneRow)}";
    clmArr[6611]= "{!JSENCODE($Label.CIExpAcceptablevalues110)}";
    clmArr[6671]= "{!JSENCODE($Label.CIExpClicktoopentheColorSelector)}";
    clmArr[2872]= "{!JSENCODE($Label.CIExpCancel)}";

    clmArr[6678]= "{!JSENCODE($Label.CIExpCIExplorerfailedToFetchRelationshipRecords)}";
    //Added By Manoj for ToolTIp
    clmArr[7001]= "{!JSENCODE($Label.TooltipCIExplorerLineRelationshipLevels)}";
    clmArr[7006]= "{!JSENCODE($Label.TooltipCIExplorerRelationshipDSLineDirection)}";
    clmArr[7007]= "{!JSENCODE($Label.TooltipCIExplorerRelationshipDSLineThickness)}";
    clmArr[7008]= "{!JSENCODE($Label.TooltipCIExplorerRelationshipDSLineStyle	)}";
    clmArr[7009]= "{!JSENCODE($Label.TooltipCIExplorerRelationshipDSLineColor)}";
    clmArr[7010]= "{!JSENCODE($Label.TooltipCIExplorerFieldDisplayFields)}";
    clmArr[7011]= "{!JSENCODE($Label.TooltipCIExplorerFieldAvailableFields)}";
    clmArr[7012]= "{!JSENCODE($Label.TooltipCIExplorerFieldSelectedFields)}";
	// End here

    function onSilverlightError(sender, args) {
    var appSource = "";
    if (sender != null && sender != 0) {
    appSource = sender.getHost().Source;
    }

    var errorType = args.ErrorType;
    var iErrorCode = args.ErrorCode;

    if (errorType == "ImageError" || errorType == "MediaError") {
    return;
    }

    var errMsg = "Unhandled Error in Silverlight Application " +  appSource + "\n" ;

    errMsg += "Code: "+ iErrorCode + "    \n";
    errMsg += "Category: " + errorType + "       \n";
    errMsg += "Message: " + args.ErrorMessage + "     \n";

    if (errorType == "ParserError") {
    errMsg += "File: " + args.xamlFile + "     \n";
    errMsg += "Line: " + args.lineNumber + "     \n";
    errMsg += "Position: " + args.charPosition + "     \n";
    }
    else if (errorType == "RuntimeError") {
    if (args.lineNumber != 0) {
    errMsg += "Line: " + args.lineNumber + "     \n";
    errMsg += "Position: " +  args.charPosition + "     \n";
    }
    errMsg += "MethodName: " + args.methodName + "     \n";
    }

    throw new Error(errMsg);
    }

    function getIsAllowedtoSave()
    {
      var isAllowedToSave = {!isUserSA};
      return isAllowedToSave;
    }

    
  </script>

    <style type="text/css">
    
    body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    }
    
    </style>
    </head>
    <body onload="">
    <object height="100%" width="100%" id ="silverlightControl" data="data:application/x-silverlight-2," type="application/x-silverlight-2" >
      <param name="source" value="{!URLFOR($Resource.CIForce,'CIExplorerOnForce.xap')}"/>
      <param name="onError" value="onSilverlightError" />
      <param name="background" value="white" />
      <param name="minRuntimeVersion" value="3.0.40624.0" />
      <param name="autoUpgrade" value="true" />
      <param name="pluginbackground" value="Transparent" />
      <param name="windowless" value="true" />    
      <a id="silverlightlink" href="http://go.microsoft.com/fwlink/?LinkID=149156&v=3.0.40624.0" style="text-decoration:none">
        <img id="silverlightimg" src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" style="border-style:none"/>
      </a>
    </object>
    <iframe id="_sl_historyFrame" style="visibility:hidden;margin:0px;padding:0px;height:0px;width:0px;border:0px"></iframe>
    </body>
     <script>
	function getservertime(ciservertime){
		//alert("getservertime"+ciservertime);
		CILaunchData = "";
		servertime = 0;
		servertime = servertime + parseInt(ciservertime);
		servertimecounter++ ;
		//if(servertimecounter == 1){
			if(infopaneflag == 0){
		    	servertime = parseInt(servertime) + parseInt(temptime) + parseInt(CIEndLaunch);
		    	CILaunchData += '{!JSENCODE($Label.PM_servertime)}';
			  	CILaunchData += servertime;
			  	CILaunchData += '<br>';	
		    }	
			if(infopaneflag == 1){
				//alert("***");
				servertime = 0;
				servertime = parseInt(ciservertime);
		  		infopaneflag = 0;
		  		CILaunchData = '';
		  		CILaunchData += '{!JSENCODE($Label.PM_servertime)}';
			  	CILaunchData += servertime;
			  	CILaunchData += '<br>';	
		  	} 
		//}
		
	}
	
	function latencytime(latencytime){
		finallatency = 0;
		finallatency = finallatency + parseInt(latencytime);
		latencytimecounter++;
		//if(latencytimecounter == 1){
			CILaunchData += '{!JSENCODE($Label.PM_netwokLatency)}';
			CILaunchData += finallatency;
		    CILaunchData += '<br>';			
		//}
	}
	function getpageload(pageload){
		pageloadtime = 0;
		pageloadtime = pageloadtime + pageload;
		pageloadtimecounter++;
		//if(pageloadtimecounter == 1){
			CILaunchData += '{!JSENCODE($Label.PM_PageLoad)}';
			CILaunchData += pageloadtime;
		    CILaunchData += '<br>'; 		
		//}
	}
	function infopane(infopane){
		infopaneflag = 1;
	}
	var CIEndLaunch = '{!ciendtime}';
	CIEndLaunch = CIEndLaunch - startCILaunch; 
	var temptime = '{!lcetime}';
	
  	</script>

 	<apex:form >
        <apex:actionFunction name="checkPermission" action="{!checkPermission}" reRender="accessPanel" oncomplete="showScreen()">
        <apex:param name="objectName" value="" assignTo="{!objectName}"/>
        <apex:param name="objId " value="" assignTo="{!objId }" />
    </apex:actionFunction>
    <apex:outputPanel id="accessPanel" rendered="true">
        <script>         
         isaccess = {!isAccessible};
          
        </script>  
    </apex:outputPanel>
    </apex:form>
</apex:page>